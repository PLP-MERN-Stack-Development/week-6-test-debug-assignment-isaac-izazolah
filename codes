// Filename: mern-bug-tracker/fullProject.js

// --- BACKEND SETUP (Node.js + Express + MongoDB) ---

// server.js
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const app = express();
const bugRoutes = require('./routes/bugRoutes');

app.use(cors());
app.use(express.json());
app.use('/api/bugs', bugRoutes);

app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Something went wrong!' });
});

mongoose.connect('mongodb://localhost:27017/mern-bug-tracker')
  .then(() => app.listen(5000, () => console.log('Server running on port 5000')))
  .catch(err => console.log(err));

// models/Bug.js
const mongoose = require('mongoose');
const bugSchema = new mongoose.Schema({
  title: String,
  description: String,
  status: { type: String, default: 'open' },
});
module.exports = mongoose.model('Bug', bugSchema);

// routes/bugRoutes.js
const express = require('express');
const router = express.Router();
const Bug = require('../models/Bug');

router.get('/', async (req, res) => {
  const bugs = await Bug.find();
  res.json(bugs);
});

router.post('/', async (req, res) => {
  const newBug = new Bug(req.body);
  await newBug.save();
  res.status(201).json(newBug);
});

router.put('/:id', async (req, res) => {
  const updated = await Bug.findByIdAndUpdate(req.params.id, req.body, { new: true });
  res.json(updated);
});

router.delete('/:id', async (req, res) => {
  await Bug.findByIdAndDelete(req.params.id);
  res.json({ message: 'Deleted' });
});

module.exports = router;

// tests/bugRoutes.test.js (Integration with Supertest + Jest)
const request = require('supertest');
const app = require('../server');

describe('Bug Routes', () => {
  it('should create a new bug', async () => {
    const res = await request(app).post('/api/bugs').send({
      title: 'Bug A',
      description: 'Bug description A'
    });
    expect(res.statusCode).toEqual(201);
    expect(res.body.title).toBe('Bug A');
  });
});

// --- FRONTEND SETUP (React + Tailwind) ---

// App.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';

function App() {
  const [bugs, setBugs] = useState([]);
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');

  const fetchBugs = async () => {
    const res = await axios.get('/api/bugs');
    setBugs(res.data);
  };

  const addBug = async () => {
    await axios.post('/api/bugs', { title, description });
    setTitle(''); setDescription('');
    fetchBugs();
  };

  const deleteBug = async (id) => {
    await axios.delete(`/api/bugs/${id}`);
    fetchBugs();
  };

  useEffect(() => { fetchBugs(); }, []);

  return (
    <div className="p-4">
      <h1 className="text-xl font-bold mb-2">Bug Tracker</h1>
      <input className="border p-1 mr-1" placeholder="Title" value={title} onChange={(e) => setTitle(e.target.value)} />
      <input className="border p-1 mr-1" placeholder="Description" value={description} onChange={(e) => setDescription(e.target.value)} />
      <button className="bg-blue-500 text-white px-2" onClick={addBug}>Add Bug</button>
      <ul className="mt-4">
        {bugs.map(bug => (
          <li key={bug._id} className="flex justify-between border-b py-2">
            <span>{bug.title} - {bug.status}</span>
            <button className="text-red-500" onClick={() => deleteBug(bug._id)}>Delete</button>
          </li>
        ))}
      </ul>
    </div>
  );
}

export default App;

// __tests__/App.test.js (React Testing Library)
import { render, screen, fireEvent } from '@testing-library/react';
import App from '../App';

test('renders Bug Tracker heading', () => {
  render(<App />);
  const heading = screen.getByText(/Bug Tracker/i);
  expect(heading).toBeInTheDocument();
});

// --- README.md ---

/**
# MERN Bug Tracker

## Setup
1. `cd backend` -> `npm install && npm start`
2. `cd frontend` -> `npm install && npm start`

## Testing
- Backend: `npm test`
- Frontend: `npm test`

## Features
- Create, update, delete, view bugs.

## Debugging Tools
- Console.log, Chrome DevTools, Node inspector
- Error Boundaries in React

*/
